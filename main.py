# -*- coding: utf-8 -*-
"""ICD-10 Diagnosis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qprnXJaLAw6rPLvibq7xI7-aYKYdvQVX
"""

#libraries
import numpy as np
import pandas as pd
from io import StringIO
from rapidfuzz import process
import ast
import re
from tqdm import tqdm

#!pip install rapidfuzz

#!unzip /content/Files.zip

df=pd.read_csv('/content/Diagnoses_list - Sheet1.csv')

df.head()

df = df[df['Diagnoses_list'].notna()]
df = df[df['Diagnoses_list'].str.contains('\w', na=False)]
df = df[df['Diagnoses_list'].str.len() > 4]

#! unzip /content/FY24-CMS-1785-F-Code-Descriptions.zip

with open('/content/icd10cm_codes_2024.txt', 'r') as f:
    icd_raw_text = f.read()

icd_df = pd.read_csv(StringIO(icd_raw_text), sep=r"\s{2,}", engine="python", names=["ICD_Code", "ICD_Description"])
print(icd_df.head())

def clean_diagnoses_list(raw_list,max_items=1000):
    try:
        if isinstance(raw_list, list):  # already a list
            return [str(item).strip() for item in raw_list if isinstance(item, str)]
        elif isinstance(raw_list, str):
            parsed = ast.literal_eval(raw_list)
            if isinstance(parsed, list):
                return [str(item).strip() for item in parsed if isinstance(item, str)]
        return []
    except Exception as e:
        print("Parse error:", e)
        return []

icd_df.head()

def map_to_icd_with_alternatives(diagnosis, icd_df, threshold=80, top_n=3):
    choices = icd_df['ICD_Description'].tolist()
    top_matches = process.extract(diagnosis, choices, limit=top_n)

    best_match, best_score, _ = top_matches[0]

    if best_score >= threshold:
        icd_row = icd_df[icd_df['ICD_Description'] == best_match].iloc[0]
        return {
            'Original_Diagnosis': diagnosis,
            'ICD_Code': icd_row['ICD_Code'],
            'ICD_Description': icd_row['ICD_Description'],
            'Match_Score': best_score,
            'Suggested_Alternatives': None,
            'Justification': f"Fuzzy matched to: '{best_match}' with score {best_score}"
        }
    else:
        alt_suggestions = []
        for match_text, score, _ in top_matches:
            row = icd_df[icd_df['ICD_Description'] == match_text].iloc[0]
            alt_suggestions.append({
                'ICD_Code': row['ICD_Code'],
                'ICD_Description': row['ICD_Description'],
                'Score': score
            })
        return {
            'Original_Diagnosis': diagnosis,
            'ICD_Code': None,
            'ICD_Description': None,
            'Match_Score': best_score,
            'Suggested_Alternatives': alt_suggestions,
            'Justification': f"No confident match (top score {best_score}). Suggested alternatives provided."
        }

mapped_results = []
cache = {}

for row in tqdm(df['Diagnoses_list']):
    diagnoses = clean_diagnoses_list(row)
    for diag in diagnoses:
        if diag not in cache:
            cache[diag] = map_to_icd_with_alternatives(diag, icd_df)
        mapped_results.append(cache[diag])

mapped_df = pd.DataFrame(mapped_results)

mapped_df[['Original_Diagnosis', 'ICD_Code', 'ICD_Description', 'Match_Score', 'Justification']]

"""When there's no exact match, fuzzy score set a threshold for atleast a score of 80. Below 80, we can't assign any ICD Code but a proper justification has been called that we aren't confident about the description.

------------------------------------------------------------------------
"""

final_df=mapped_df[['Original_Diagnosis', 'ICD_Code', 'ICD_Description']]

#the final dataset
final_df

"""Evaluation Criteria"""

mapped_df[['Original_Diagnosis', 'ICD_Code', 'ICD_Description', 'Match_Score', 'Justification']]

"""Match Score finds the accuracy between ICD_Dsecription and Original Documents to which ICD_Codes had been assigned."""

mapped_df.to_csv("mapped_diagnoses_with_icd.csv", index=False)

